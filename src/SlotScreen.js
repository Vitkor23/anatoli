import './SlotScreen.css';
import Reel from './Reel'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Reel
import React, { useState } from 'react';
import { Link, useLocation } from 'react-router-dom'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º Link –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞

// –ò–º–ø–æ—Ä—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
import img1 from '../src/images/img/imag1.jpg';
import img2 from '../src/images/img/img2.jpg';
import img3 from '../src/images/img/img3.jpg';
import img4 from '../src/images/img/img4.jpg';
import img5 from '../src/images/img/img5.jpg';
import imgwild from '../src/images/img/imgwild.jpg';

// –ú–∞—Å—Å–∏–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
const images = [img1, img2, img3, img4, img5, imgwild];

const SlotScreen = () => {
  const [isSpinning, setIsSpinning] = useState(false);
  const [results, setResults] = useState([[], [], []]);
  const [balance, setBalance] = useState(500); // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
  const [bet, setBet] = useState(1); // –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
  const [message, setMessage] = useState(''); // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const [highlightedLines, setHighlightedLines] = useState([]); // –õ–∏–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∏–≥—Ä–∞–ª–∏
  const [spinCount, setSpinCount] = useState(0); // –°—á—ë—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–æ–≤
  const [probHit, setProbHit] = useState(0); // –°—á—ë—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–æ–≤ –¥–ª—è –ü—Ä–æ–±–∏—Ç—å –ê–Ω–∞—Ç–æ–ª–∏—è

  const location = useLocation(); // –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—É—Ç–∏

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–æ—Ç–∞
  const handleSpin = () => {
    if (balance < bet) {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
      return;
    }

    setIsSpinning(true);
    setResults([[], [], []]); // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    setBalance((prev) => prev - bet); // –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–∞–≤–∫—É
    setMessage(''); // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—Ä–∞—â–µ–Ω–∏–µ–º
    setHighlightedLines([]); // –û—á–∏—â–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ª–∏–Ω–∏–π

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—Ä–∞—â–µ–Ω–∏—è
    setTimeout(() => {
      setIsSpinning(false);
      generateResults();
    }, 3000); // –í—Ä–∞—â–µ–Ω–∏–µ –¥–ª–∏—Ç—Å—è 3 —Å–µ–∫—É–Ω–¥—ã

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–æ–≤
    setSpinCount((prev) => prev + 1);

    // –ö–∞–∂–¥—ã–µ 10 –ø—Ä–æ–∫—Ä—É—Ç–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ü—Ä–æ–±–∏—Ç—å –ê–Ω–∞—Ç–æ–ª–∏—è
    if ((spinCount + 2) % 10 === 0) {
      setProbHit((prev) => prev + 1);
    }
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –±–∞—Ä–∞–±–∞–Ω–æ–≤
  const generateResults = () => {
    const newResults = [
      [getRandomImage(), getRandomImage(), getRandomImage()],
      [getRandomImage(), getRandomImage(), getRandomImage()],
      [getRandomImage(), getRandomImage(), getRandomImage()],
    ];
    setResults(newResults);
    checkWin(newResults); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–∏–≥—Ä—ã—à
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –±–∞—Ä–∞–±–∞–Ω–∞
  const getRandomImage = () => images[Math.floor(Math.random() * images.length)];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–∏–≥—Ä—ã—à
  const checkWin = (newResults) => {
    let totalWinnings = 0;
    const newHighlightedLines = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
    for (let i = 0; i < 3; i++) {
      // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ –∫–∞–∂–¥–æ–π –ª–∏–Ω–∏–∏
      const line = [newResults[0][i], newResults[1][i], newResults[2][i]]; 

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      const wildCount = line.filter((symbol) => symbol === imgwild).length;
      const nonWildSymbols = line.filter((symbol) => symbol !== imgwild);

      // –ï—Å–ª–∏ –≤—Å–µ 3 –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∏–ª–∏ –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∏ –æ–¥–∏–Ω Wild
      if (
        (line[0] === line[1] && line[0] === line[2]) || 
        (wildCount === 1 && nonWildSymbols.length === 1 && nonWildSymbols[0] === line[0]) ||
        (wildCount === 2 && nonWildSymbols.length === 1)
      ) {
        const winnings = bet * 10; // –£–º–Ω–æ–∂–∞–µ–º —Å—Ç–∞–≤–∫—É –Ω–∞ 10, –µ—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª–∏
        totalWinnings += winnings;
        newHighlightedLines.push(i); // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∏–≥—Ä–∞–≤—à—É—é –ª–∏–Ω–∏—é
      }
    }

    // –ï—Å–ª–∏ –±—ã–ª –≤—ã–∏–≥—Ä—ã—à, –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (totalWinnings > 0) {
      setBalance((prev) => prev + totalWinnings);
      setMessage(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${totalWinnings} –º–æ–Ω–µ—Ç.`);
    } else {
      setMessage('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∏–≥—Ä–∞–ª–∏
    setHighlightedLines(newHighlightedLines);
  };

  // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
  const increaseBet = () => {
    if (bet < balance) {
      setBet((prevBet) => prevBet + 1);
    }
  };

  // –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
  const decreaseBet = () => {
    if (bet > 1) {
      setBet((prevBet) => prevBet - 1);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å "–≥–∞–≤–∫–æ–π"
  const handleBarkRedirect = () => {
    if (probHit > 0) {
      window.location.href = '/bark'; // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≥–∞–≤–∫–æ–π
    }
  };

  return (
    <div className="slot-screen">
      <h1>–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ üé∞</h1>

      <div className="balance-container">
        <div className="balance">–ë–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç</div>
        <div className="bet-container">
          <button onClick={decreaseBet} disabled={isSpinning}>
            &#8592;
          </button>
          <div className="bet">–°—Ç–∞–≤–∫–∞: {bet}</div>
          <button onClick={increaseBet} disabled={isSpinning}>
            &#8594;
          </button>
        </div>
      </div>

      <div className="reels-container">
        {Array(3)
          .fill(null)
          .map((_, index) => (
            <Reel
              key={index}
              isSpinning={isSpinning}
              images={images}
              highlighted={highlightedLines.includes(index)}
              onStop={(finalImages) => {
                const newResults = [...results];
                newResults[index] = finalImages;
                setResults(newResults);
              }}
            />
          ))}
      </div>

      <button onClick={handleSpin} disabled={isSpinning} className="spin-button">
        {isSpinning ? '–í—Ä–∞—â–µ–Ω–∏–µ...' : '–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å'}
      </button>

      <div className="message">{message}</div>

      <div className="probhit-container">
        <button
          className="probhit-button"
          disabled={isSpinning}
          onClick={handleBarkRedirect}
        >
          –ü—Ä–æ–±–∏—Ç—å –ê–Ω–∞—Ç–æ–ª–∏—è ({probHit})
        </button>
      </div>

      {/* –ï—Å–ª–∏ probHit > 0, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–º–æ—â—å—é Link */}
      {probHit > 0 && <Link to="/bark" />}
    </div>
  );
};

export default SlotScreen;
